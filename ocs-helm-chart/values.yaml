replicaCount: 1

image:
  repository: ocsinventory/ocsinventory-docker-image 
  pullPolicy: Always
  tag: "2.11"

imagePullSecrets: {}
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

database:
  create: true
  jobName: dbocscreate
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

env: 
  dbHost: ""

secret:
  data:
    OCS_DB_USER: ""
    OCS_DB_PASS: ""
    OCS_DB_NAME: "ocsweb"
    OCS_SSL_ENABLED: ""

volumeMounts:
  - name: ocsdata
    mountPath: /etc/ocsinventory-server
  - name: ocsdata
    mountPath: /usr/share/ocsinventory-reports/ocsreports/extensions
  - name: ocsdata
    mountPath: /var/lib/ocsinventory-reports
  #- name: httpdconfdata
  #  mountpath: /etc/apache2/conf-available

persistence:
  enabled: true
  size: 2Gi
  accessModes: 
  - "ReadWriteOnce"

service:
  type: ClusterIP
  port: 80
  containerPort: 80
  protocol: TCP
  name: http

ingress:
  enabled: true
  className: ""
  annotations: 
    cert-manager.io/cluster-issuer: ""
    #kubernetes.io/ingress.class: nginx-external
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
  hosts:
    - host: 
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: {}

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

mysql: 
  enabled: false
  auth:
    createDatabase: true
    database: "ocs-db"
    username: ""
    password: ""

